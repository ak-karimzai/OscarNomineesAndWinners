// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: movie.sql

package db

import (
	"context"
	"testing"

	"github.com/nmferoz/db/util"
	"github.com/stretchr/testify/require"
)

func createRandomMovie(t *testing.T) Movie {
	movie, err := testQueries.CreateMovie(context.Background(),
	CreateMovieParams{
		Title: util.RandomString(32),
		ReleaseYear: int32(util.RandomInt(1990, 2023)),
		Director: util.RandomString(32),
		Genre: util.RandomString(10),
	})

	require.NoError(t, err)
	return movie
}

func TestCreateMovie(t *testing.T) {
	createRandomMovie(t)
}

func TestGetMovie(t *testing.T) {
	movie := createRandomMovie(t)

	movie2, err := testQueries.GetMovie(
		context.Background(), movie.ID)
	require.NoError(t, err)

	require.NotEmpty(t, movie2)
	require.Equal(t, movie.ID, movie2.ID)
	require.Equal(t, movie.Title, movie2.Title)
	require.Equal(t, movie.ReleaseYear, movie2.ReleaseYear)
	require.Equal(t, movie.Director, movie2.Director)
	require.Equal(t, movie.Genre, movie2.Genre)
}

func TestDeleteMovie(t *testing.T) {
	movie := createRandomMovie(t)
	
	testQueries.DeleteMovie(context.Background(), movie.ID)

	_, err := testQueries.GetMovie(
		context.Background(), movie.ID)
	require.Error(t, err)
}

func TestUpdateMovie(t *testing.T) {
	movie := createRandomMovie(t)

	var	newTitle = "New Title"
	var	releaseYear int32 = 1999
	var	director = "New Director"
	var	genre = "New Genre"
	

	err := testQueries.UpdateMovie(context.Background(), 
	UpdateMovieParams{
		Title: newTitle,
		ReleaseYear: int32(releaseYear),
		Director: director,
		Genre:  genre,
		ID:  movie.ID,
	})
	require.NoError(t, err)


	movie2, err := testQueries.GetMovie(context.Background(), movie.ID)
	require.NoError(t, err)
	require.NotEmpty(t, movie2)

	require.Equal(t, movie2.Title, newTitle)
	require.Equal(t, movie2.ReleaseYear, releaseYear)
	require.Equal(t, movie2.Director, director)
	require.Equal(t, movie2.Genre, genre)
}

func TestListMovies(t *testing.T) {
	n := 10

	for i := 0; i < n; i++ {
		createRandomMovie(t)
	}

	movies, err := testQueries.ListMovies(context.Background(), ListMoviesParams{
		Limit: 10,
		Offset: 0,
	});
	require.NoError(t, err)
	require.Len(t, movies, 10)
}