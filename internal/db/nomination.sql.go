// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: nomination.sql

package db

import (
	"context"
)

const createNomination = `-- name: CreateNomination :one
INSERT INTO nominations("movie_id", "award_id", "year", "is_winner") VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateNominationParams struct {
	MovieID  int32 `json:"movie_id"`
	AwardID  int32 `json:"award_id"`
	Year     int32 `json:"year"`
	IsWinner bool  `json:"is_winner"`
}

func (q *Queries) CreateNomination(ctx context.Context, arg CreateNominationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNomination,
		arg.MovieID,
		arg.AwardID,
		arg.Year,
		arg.IsWinner,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteNomination = `-- name: DeleteNomination :exec
DELETE FROM nominations WHERE id = $1
`

func (q *Queries) DeleteNomination(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNomination, id)
	return err
}

const getNomination = `-- name: GetNomination :one
SELECT id, movie_id, award_id, year, is_winner FROM nominations WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNomination(ctx context.Context, id int64) (Nomination, error) {
	row := q.db.QueryRowContext(ctx, getNomination, id)
	var i Nomination
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.AwardID,
		&i.Year,
		&i.IsWinner,
	)
	return i, err
}

const listNominations = `-- name: ListNominations :many
SELECT id, movie_id, award_id, year, is_winner FROM nominations LIMIT $1 OFFSET $2
`

type ListNominationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNominations(ctx context.Context, arg ListNominationsParams) ([]Nomination, error) {
	rows, err := q.db.QueryContext(ctx, listNominations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Nomination{}
	for rows.Next() {
		var i Nomination
		if err := rows.Scan(
			&i.ID,
			&i.MovieID,
			&i.AwardID,
			&i.Year,
			&i.IsWinner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNomination = `-- name: UpdateNomination :exec
UPDATE nominations SET movie_id = $1, award_id = $2, year = $3, is_winner = $4 WHERE id = $5
`

type UpdateNominationParams struct {
	MovieID  int32 `json:"movie_id"`
	AwardID  int32 `json:"award_id"`
	Year     int32 `json:"year"`
	IsWinner bool  `json:"is_winner"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateNomination(ctx context.Context, arg UpdateNominationParams) error {
	_, err := q.db.ExecContext(ctx, updateNomination,
		arg.MovieID,
		arg.AwardID,
		arg.Year,
		arg.IsWinner,
		arg.ID,
	)
	return err
}
