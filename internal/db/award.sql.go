// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: award.sql

package db

import (
	"context"
)

const createAward = `-- name: CreateAward :one
INSERT INTO awards("name", "category") VALUES ($1, $2) RETURNING id
`

type CreateAwardParams struct {
	Name     string `json:"name"`
	Category string `json:"category"`
}

func (q *Queries) CreateAward(ctx context.Context, arg CreateAwardParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAward, arg.Name, arg.Category)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAward = `-- name: DeleteAward :exec
DELETE FROM awards WHERE id = $1
`

func (q *Queries) DeleteAward(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAward, id)
	return err
}

const getAward = `-- name: GetAward :one
SELECT id, name, category FROM awards WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAward(ctx context.Context, id int64) (Award, error) {
	row := q.db.QueryRowContext(ctx, getAward, id)
	var i Award
	err := row.Scan(&i.ID, &i.Name, &i.Category)
	return i, err
}

const listAwards = `-- name: ListAwards :many
SELECT id, name, category FROM awards LIMIT $1 OFFSET $2
`

type ListAwardsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAwards(ctx context.Context, arg ListAwardsParams) ([]Award, error) {
	rows, err := q.db.QueryContext(ctx, listAwards, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Award{}
	for rows.Next() {
		var i Award
		if err := rows.Scan(&i.ID, &i.Name, &i.Category); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAward = `-- name: UpdateAward :exec
UPDATE awards SET name = $1, category = $2 WHERE id = $3
`

type UpdateAwardParams struct {
	Name     string `json:"name"`
	Category string `json:"category"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateAward(ctx context.Context, arg UpdateAwardParams) error {
	_, err := q.db.ExecContext(ctx, updateAward, arg.Name, arg.Category, arg.ID)
	return err
}
