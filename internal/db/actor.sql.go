// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: actor.sql

package db

import (
	"context"
)

const createActor = `-- name: CreateActor :one
INSERT INTO actors("name", "birth_year", "nationality") VALUES ($1, $2, $3) RETURNING id
`

type CreateActorParams struct {
	Name        string `json:"name"`
	BirthYear   int32  `json:"birth_year"`
	Nationality string `json:"nationality"`
}

func (q *Queries) CreateActor(ctx context.Context, arg CreateActorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createActor, arg.Name, arg.BirthYear, arg.Nationality)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteActor = `-- name: DeleteActor :exec
DELETE FROM actors WHERE id = $1
`

func (q *Queries) DeleteActor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActor, id)
	return err
}

const getActor = `-- name: GetActor :one
SELECT id, name, birth_year, nationality FROM actors WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActor(ctx context.Context, id int64) (Actor, error) {
	row := q.db.QueryRowContext(ctx, getActor, id)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BirthYear,
		&i.Nationality,
	)
	return i, err
}

const listActors = `-- name: ListActors :many
SELECT id, name, birth_year, nationality FROM actors LIMIT $1 OFFSET $2
`

type ListActorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActors(ctx context.Context, arg ListActorsParams) ([]Actor, error) {
	rows, err := q.db.QueryContext(ctx, listActors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Actor{}
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BirthYear,
			&i.Nationality,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActor = `-- name: UpdateActor :exec
UPDATE actors SET name = $1, birth_year = $2, nationality = $3 WHERE id = $4
`

type UpdateActorParams struct {
	Name        string `json:"name"`
	BirthYear   int32  `json:"birth_year"`
	Nationality string `json:"nationality"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateActor(ctx context.Context, arg UpdateActorParams) error {
	_, err := q.db.ExecContext(ctx, updateActor,
		arg.Name,
		arg.BirthYear,
		arg.Nationality,
		arg.ID,
	)
	return err
}
