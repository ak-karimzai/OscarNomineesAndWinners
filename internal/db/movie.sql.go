// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: movie.sql

package db

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO "movies" ("title", "release_year", "director", "genre") VALUES ($1, $2, $3, $4) RETURNING id, title, release_year, director, genre
`

type CreateMovieParams struct {
	Title       string `json:"title"`
	ReleaseYear int32  `json:"release_year"`
	Director    string `json:"director"`
	Genre       string `json:"genre"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.ReleaseYear,
		arg.Director,
		arg.Genre,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseYear,
		&i.Director,
		&i.Genre,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM "movies" WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, release_year, director, genre FROM "movies" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ReleaseYear,
		&i.Director,
		&i.Genre,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, release_year, director, genre FROM "movies" LIMIT $1 OFFSET $2
`

type ListMoviesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ReleaseYear,
			&i.Director,
			&i.Genre,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE "movies" SET title = $1, release_year = $2, director = $3, genre = $4 WHERE id = $5
`

type UpdateMovieParams struct {
	Title       string `json:"title"`
	ReleaseYear int32  `json:"release_year"`
	Director    string `json:"director"`
	Genre       string `json:"genre"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.db.ExecContext(ctx, updateMovie,
		arg.Title,
		arg.ReleaseYear,
		arg.Director,
		arg.Genre,
		arg.ID,
	)
	return err
}
